buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.yourname.examplemod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200514-1.16'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.108'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "examplemod",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}





//json generation tasks!!

class ItemJSONTask extends DefaultTask {
    String MODID = 'examplemod'

    def writeToFile(name, type){

        String s = "{\"parent\": \"item/" + type.toLowerCase() + "\",\"textures\": {\"layer0\": \"" + MODID + ":item/" + name + "\"}}"

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item/"+name+".json").text = s
    }

    @TaskAction
    def greet() {
        String[] listy
        new File("${project.projectDir}/src/main/resources/generate/items").eachLine { line ->
            listy = line.split(" ")
            writeToFile(listy[1], listy[0])
        }
    }
}

task generateItemJSONs(type: ItemJSONTask){
    group = 'fg_runs'
    description = 'a gradle task to generate all item jsons from the items file.'
}

class BlockJSONTask extends DefaultTask {
    String MODID = 'examplemod'

    def blockstatesJSON(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{\"variants\": {\"\": {\"model\": \"" + MODID + ":block/" + name + "\"}}}")

        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/blockstates")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/blockstates/"+name+".json").text = s
    }
    
    def blockJSON(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{");
        builder.append("\"parent\": \"minecraft:block/" + "cube_all" + "\",");

        builder.append("\"textures\": {");
        // TODO: Need to figure out how to apply textures properly for various
        // types
        builder.append(" \"all\": \"" + MODID + ":block/" + name + "\"");
        builder.append("}");
        builder.append("}");

        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block/"+name+".json").text = s
    }
    def itemJSON(name){

        String s = "{\"parent\": \"" + MODID + ":block/" + name + "\"}"

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item/"+name+".json").text = s
    }


    @TaskAction
    def greet() {
        new File("${project.projectDir}/src/main/resources/generate/blocks").eachLine { line ->
            blockstatesJSON(line)
            blockJSON(line)
            itemJSON(line)
        }
        // println greeting
    }
}

task generateBlockJSONs(type: BlockJSONTask){
    group = 'fg_runs'
    description = 'a gradle task to generate all block jsons from the blocks file.'
}